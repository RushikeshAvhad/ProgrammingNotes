Hereâ€™s a comprehensive list of common Git commands along with their uses:
This list covers many of the common Git commands you'll use in day-to-day development. 
Each command has various options and flags that can further refine its behavior.

# Basic Commands
git init
    Initializes a new Git repository in the current directory.
git clone <repository-url>
    Creates a copy of a remote repository on your local machine.
git status
    Shows the status of changes in your working directory and staging area.
git add <file>
    Stages changes (adds) to the specified file(s) for the next commit.
git commit -m "message"
    Commits the staged changes with a descriptive message.
git log
    Shows the commit history for the current branch.
git diff
    Displays changes between commits, working directory, and staging area.
git reset <file>
    Unstages a file, but keeps the changes in the working directory.
git rm <file>
    Removes a file from the working directory and stages the removal for commit.

# Branching and Merging
git branch
    Lists all branches in the repository. Adding a branch name creates a new branch.
git branch <branch-name>
    Creates a new branch with the specified name.
git checkout <branch-name>
    Switches to the specified branch.
git checkout -b <branch-name>
    Creates a new branch and switches to it.
git merge <branch-name>
    Merges the specified branch into the current branch.
git rebase <branch-name>
    Reapplies commits from the current branch on top of another branch.
git branch -d <branch-name>
    Deletes the specified branch (must be fully merged).
git branch -D <branch-name>
    Forcefully deletes the specified branch (even if not fully merged).

# Remote Repositories
git remote add <name> <url>
    Adds a new remote repository with the specified name and URL.
git remote -v
    Lists the remote repositories and their URLs.
    View / Verify the current remote URL (This will display the current remote url for both fetch and push)
git fetch <remote>
    Fetches changes from the specified remote repository without merging.
git pull <remote> <branch>
    Fetches changes from the remote repository and merges them into the current branch.
git push <remote> <branch>
    Pushes commits from the local branch to the specified remote branch.
git push --set-upstream <remote> <branch>
    Pushes a new branch to the remote and sets the upstream branch for tracking.
git push --force
    Forcefully pushes changes to the remote repository, overwriting remote changes.
git remote set-url origin new_remote_url 
    Update the remote URL (Replace new_remote_url with correct URL for your remote repository)
git remote add origin URL 
    Create Repository on Git Hub and get the URL from there
git branch -M main 
    Change Branch Name to Main
git push origin master 
    This sends your commited files to your remote repository
git push -u origin BranchName(Main/Feature) 
    Push The Commit to GitHub
git branch -a
    list all branches /list the all local branch Name
git branch -r 
    View remote tracking branches
git remote show origin 
    show detail configuration
git branch --Track BranchName origin/branchName 
    Create Local Tracking Branch
git branch --Track origin/feature remote/origin/feature(branchName) 
    Tracking remote branch in clone repository
git push origin BranchName(feature)
    clone change and push using branchname on particular branch
git branch -vv 
    list local tracking branches and their remote /get more detail about branch
git ls-remote 
    list the remote branch
git fetch origin 
    fetch the remote branch in project
    get the changes made in remote branch into local repository
git pull BranchName
    Fetch and Merge Branch (It is a combination of git fetch and git merge command)
git branch --delete --remotes origin/BranchName 
    Deleting Remote tracking Branch
git push origin --delete BranchName 
    deleting remote branch
git branch -r
    The git branch -r command is used to list all remote branches in a Git repository
git reset --hard head~1
    delete commit by 1
git push origin master
    after deleting commit run the command to push to the remote
git push --force origin master 
    push to the remote forecly
git pull remote master 
    get latest version from git hub repository
git pull 
    pull the latest code from the github to local branch (merge code to master branch)
    When you've finished making changes to someone else's code, you can share them with the original owner via a "PULL request"
    retrives & downloads content from a remote repository & updates the local repository as soon as it has been downloaded
git merge <branch> 
    The git merge command is used to integrate changes from one branch into another. 
    It combines the commits from two branches, creating a new commit that incorporates the changes from both branches.

# Stashing Changes
git stash
    Stashes (temporarily shelves) changes in the working directory.
git stash list
    Lists all stashed changes.
git stash apply
    Applies the most recent stash without removing it from the stash list.
git stash pop
    Applies the most recent stash and removes it from the stash list.
git stash drop
    Removes the most recent stash from the stash list.

# Viewing Changes
git show <commit>
    Displays the changes made in the specified commit.
git blame <file>
    Shows the last modification for each line in a file and who made the change.

# Undoing Changes
git reset <commit>
    Resets the current branch to the specified commit. The --hard option will also discard changes in the working directory.
git revert <commit>
    Creates a new commit that undoes the changes made in the specified commit.

# Configuration and Help
git config --global user.name "Your Name"
    Sets the global username for Git commits.
git config --global user.email "you@example.com"
    Sets the global email for Git commits.
git config --list
    Lists all Git configuration settings.
git help <command>
    Displays help information for the specified Git command.


collaborater 
    Can add commit from his git hub account with his own personal access token
Fork
    In Git, "forking" refers to creating a personal copy of a repository from a remote repository. 
    This is commonly used in collaborative environments and open-source projects to contribute changes without affecting the original project.
    GitHub:
        Navigate to the repository you want to fork.
        Click the "Fork" button in the top-right corner of the page.
        Choose your account or organization where you want to fork the repository.
personal access token 
    need at the time of push commit from local
    To create go to (GitHub > Settings > Developer Setting Personal Access Token)